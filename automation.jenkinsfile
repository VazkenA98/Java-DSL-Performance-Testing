def stashlist = []
pipeline {
    agent { label 'master' }
    tools { maven 'maven-latest' }
    parameters {
        choice(name: 'testngXML', choices: ['all.xml'], description: 'testng.xml')
        string(name: 'apiURL', defaultValue: 'https://api.picsart.com/preproduction', description: 'API URL')
        string(name: 'Branch', defaultValue: 'master', description: 'Branch of PicsArt API automation repo')
        string(name: 'webUrl', defaultValue: 'https://picsart.com', description: 'WEB URL')
        string(name: 'uploadURL', defaultValue: 'https://api.picsart.com/preproduction', description: 'UPLOAD URL ')
        string(name: 'threadCount', defaultValue: '1', description: 'TEST THREAD COUNT DEFAULT VALUE')
    }

    options {
        timestamps()
        timeout(time: 10, unit: 'MINUTES')
    }

    stages {
        stage('Git checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],userRemoteConfigs: [[url: 'https://github.com/VazkenA98/Java-DSL-Performance-Testing.git']]])
                script {
                    APIURL = apiURL
                    currentBuild.displayName = APIURL
                }
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -DskipTests clean verify'
                script {
                    sh """rm -r results/ || true"""
                    currentBuild.description = "automation -> ${Branch} | WEB URL -> ${uploadURL}"
                }
            }

        }
        stage('Test') {
            steps {
                sh "mvn test -Dbranch=${Branch}  -Dthreads=${threadCount} -Dtestng.xml.file=testng/${testngXML}  -Dpicsart.api.url=$APIURL  -Dpicsart.upload.api.url=${uploadURL} -Dpicsart.web.url=$WEBURL"
            }
        }
    }
     post {
        always {

            sh """

            ls
            """
            stash includes: 'performance-results ./*//*', name: '1'
            script {
                stashlist << 1
            }
            dir("../$BUILD_NUMBER/$testngXML/$Branch") {
                sh """rm -r performance-results/ || true"""
                script {
                    for (el in stashlist) {
                        unstash "${el}"
                    }
                }
            }
        }
    }

/* def reportFailed() {
    if (fileExists("${WORKSPACE}/target/failed/")) {
        def list = findFiles(glob: '**//* target/failed *//*')
        for (el in list) {
            echo "${el.name}"
            failureLog = readFile("${WORKSPACE}/target/failed/${el.name}")
            slackSend channel: 'automation_status_check',
                    message: "Job: test ${env.BUILD_URL}allure/\n Api Core Backend Tests failed Log:\n  ${failureLog} ",
                    teamDomain: 'picsart',
                    token: 'JORDe01nxPWTiigJOMdSMlUN'
        }

    }
    sh ''' rm -rf target/failed '''
} */


}